{"ast":null,"code":"var _jsxFileName = \"/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/pages/Edit.js\",\n  _s = $RefreshSig$();\nimport { useContext } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { DiaryStateContext } from \"../App\";\nimport { useEffect } from \"react\";\nimport DiaryEditor from \"../components/DiaryEditor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Edit = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  // 현재 id 불러오기\n  const [orginData, setOriginData] = useState();\n  const diaryList = useContext(DiaryStateContext);\n  console.log(id);\n  console.log(diaryList);\n  useEffect(() => {\n    if (diaryList.length >= 1) {\n      const targetDiary = diaryList.find(it => parseInt(it.id) === parseInt(id));\n      console.log(targetDiary);\n      if (targetDiary) {\n        setOriginData(targetDiary);\n      } else {\n        navigate(\"/\", {\n          replace: true\n        });\n        // id 값이 없을 경우 강제로 홈으로 이동, 뒤로가기 방지\n      }\n    }\n  }, [id, diaryList]);\n  // 컴포넌트가 마운트 되었을 때, 다이어리 리스트에서\n  // 현재 Id 값에 맞는 데이터 불러오기\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC77C\\uAE30 \\uC218\\uC815\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this), orginData, \" && \", /*#__PURE__*/_jsxDEV(DiaryEditor, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n_s(Edit, \"3GHhDp2asaEwrG+r01Tbq8JgWJk=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = Edit;\nexport default Edit;\n\n// useSearchParams를 통해 쿼리 스트링 처리, 배열을 반환\n// setSearchParams를 통해 쿼리 데이터 변경 가능\n// http://localhost:3000/edit?id=1999&mode=dark\n// const [searchParams, setSearchParams] = useSearchParams()\n// const id = searchParams.get('id')\n// console.log(\"id : \", id) // 1999\n// const mode = searchParams.get('mode')\n// console.log(\"mode : \", mode) // dark\n\n// useNavigate는 페이지를 이동할 수 있는 함수를 반환\n// navigate(\"경로\")\n// 의도적으로 페이지를 변경할 때 사용\nvar _c;\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"names":["useContext","useParams","useNavigate","DiaryStateContext","useEffect","DiaryEditor","jsxDEV","_jsxDEV","Edit","_s","navigate","id","orginData","setOriginData","useState","diaryList","console","log","length","targetDiary","find","it","parseInt","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/pages/Edit.js"],"sourcesContent":["import { useContext } from \"react\"\nimport { useParams, useNavigate } from \"react-router-dom\"\nimport { DiaryStateContext } from \"../App\"\nimport { useEffect } from \"react\"\nimport DiaryEditor from \"../components/DiaryEditor\"\n\nconst Edit = () => {\n  const navigate = useNavigate()\n  const { id } = useParams()\n  // 현재 id 불러오기\n  const [orginData, setOriginData] = useState()\n\n  const diaryList = useContext(DiaryStateContext)\n  console.log(id)\n  console.log(diaryList)\n\n  useEffect(() => {\n    if (diaryList.length >= 1) {\n      const targetDiary = diaryList.find(\n        (it) => parseInt(it.id) === parseInt(id)\n      )\n      console.log(targetDiary)\n      if (targetDiary) {\n        setOriginData(targetDiary)\n      } else {\n        navigate(\"/\", { replace: true })\n        // id 값이 없을 경우 강제로 홈으로 이동, 뒤로가기 방지\n      }\n    }\n  }, [id, diaryList])\n  // 컴포넌트가 마운트 되었을 때, 다이어리 리스트에서\n  // 현재 Id 값에 맞는 데이터 불러오기\n\n  return <div>\n    <h2>일기 수정</h2>\n    {orginData} && <DiaryEditor />\n  </div>\n}\n\nexport default Edit\n\n\n  // useSearchParams를 통해 쿼리 스트링 처리, 배열을 반환\n  // setSearchParams를 통해 쿼리 데이터 변경 가능\n  // http://localhost:3000/edit?id=1999&mode=dark\n  // const [searchParams, setSearchParams] = useSearchParams()\n  // const id = searchParams.get('id')\n  // console.log(\"id : \", id) // 1999\n  // const mode = searchParams.get('mode')\n  // console.log(\"mode : \", mode) // dark\n\n  // useNavigate는 페이지를 이동할 수 있는 함수를 반환\n  // navigate(\"경로\")\n  // 의도적으로 페이지를 변경할 때 사용"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,SAASC,iBAAiB,QAAQ,QAAQ;AAC1C,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,WAAW,MAAM,2BAA2B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAES;EAAG,CAAC,GAAGV,SAAS,CAAC,CAAC;EAC1B;EACA,MAAM,CAACW,SAAS,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC,CAAC;EAE7C,MAAMC,SAAS,GAAGf,UAAU,CAACG,iBAAiB,CAAC;EAC/Ca,OAAO,CAACC,GAAG,CAACN,EAAE,CAAC;EACfK,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;EAEtBX,SAAS,CAAC,MAAM;IACd,IAAIW,SAAS,CAACG,MAAM,IAAI,CAAC,EAAE;MACzB,MAAMC,WAAW,GAAGJ,SAAS,CAACK,IAAI,CAC/BC,EAAE,IAAKC,QAAQ,CAACD,EAAE,CAACV,EAAE,CAAC,KAAKW,QAAQ,CAACX,EAAE,CACzC,CAAC;MACDK,OAAO,CAACC,GAAG,CAACE,WAAW,CAAC;MACxB,IAAIA,WAAW,EAAE;QACfN,aAAa,CAACM,WAAW,CAAC;MAC5B,CAAC,MAAM;QACLT,QAAQ,CAAC,GAAG,EAAE;UAAEa,OAAO,EAAE;QAAK,CAAC,CAAC;QAChC;MACF;IACF;EACF,CAAC,EAAE,CAACZ,EAAE,EAAEI,SAAS,CAAC,CAAC;EACnB;EACA;;EAEA,oBAAOR,OAAA;IAAAiB,QAAA,gBACLjB,OAAA;MAAAiB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACbhB,SAAS,EAAC,MAAI,eAAAL,OAAA,CAACF,WAAW;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AACR,CAAC;AAAAnB,EAAA,CA/BKD,IAAI;EAAA,QACSN,WAAW,EACbD,SAAS;AAAA;AAAA4B,EAAA,GAFpBrB,IAAI;AAiCV,eAAeA,IAAI;;AAGjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}