[{"/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/index.js":"1","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/App.js":"2","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/pages/Home.js":"3","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/pages/Edit.js":"4","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/pages/New.js":"5","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/pages/Diary.js":"6","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/MyButton.js":"7","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/MyHeader.js":"8","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/DiaryList.js":"9","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/DiaryItem.js":"10","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/DiaryEditor.js":"11","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/EmotionItem.js":"12","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/util/date.js":"13","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/util/emotion.js":"14"},{"size":253,"mtime":1684218219505,"results":"15","hashOfConfig":"16"},{"size":3023,"mtime":1684312554549,"results":"17","hashOfConfig":"16"},{"size":1567,"mtime":1684289890590,"results":"18","hashOfConfig":"16"},{"size":1787,"mtime":1684318907492,"results":"19","hashOfConfig":"16"},{"size":273,"mtime":1684306216443,"results":"20","hashOfConfig":"16"},{"size":2130,"mtime":1684324371969,"results":"21","hashOfConfig":"16"},{"size":337,"mtime":1684232949060,"results":"22","hashOfConfig":"16"},{"size":308,"mtime":1684233738264,"results":"23","hashOfConfig":"16"},{"size":2373,"mtime":1684299177834,"results":"24","hashOfConfig":"16"},{"size":988,"mtime":1684319665824,"results":"25","hashOfConfig":"16"},{"size":3027,"mtime":1684320135042,"results":"26","hashOfConfig":"16"},{"size":409,"mtime":1684309429199,"results":"27","hashOfConfig":"16"},{"size":174,"mtime":1684319230348,"results":"28","hashOfConfig":"16"},{"size":706,"mtime":1684320307859,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1twerzd",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/index.js",[],[],"/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/App.js",["79"],[],"import React, { useReducer, useRef } from 'react'\nimport './App.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom'\nimport Home from './pages/Home'\nimport New from './pages/New'\nimport Edit from './pages/Edit'\nimport Diary from './pages/Diary'\n\nconst reducer = (state, action) => {\n  let newState = []\n  switch (action.type) {\n    case 'INIT': {\n      return action.data\n      // action.data 최신회된 데이터\n      // state 기존 데이터\n    }\n    case 'CREATE': {\n      newState = [action.data, ...state]\n      break\n    }\n    case 'REMOVE': {\n      newState = state.filter((it) => it.id !== action.targetId)\n      break\n    }\n    case 'EDIT': {\n      newState = state.map((it) =>\n        it.id === action.data.id ? { ...action.data } : it)\n    }\n    default:\n      return state\n  }\n  return newState\n}\n\nexport const DiaryStateContext = React.createContext()\nexport const DiaryDispatchContext = React.createContext()\n\nconst dummyData = [\n  {\n    id: 1,\n    emotion: 5,\n    content: \"오늘의 첫번째 일기\",\n    date: 1684286612481\n  },\n  {\n    id: 2,\n    emotion: 4,\n    content: \"오늘의 두번째 일기\",\n    date: 1684286612482\n  },\n  {\n    id: 3,\n    emotion: 3,\n    content: \"오늘의 세번째 일기\",\n    date: 1684286612483\n  },\n  {\n    id: 4,\n    emotion: 2,\n    content: \"오늘의 네번째 일기\",\n    date: 1684286612484\n  },\n  {\n    id: 5,\n    emotion: 1,\n    content: \"오늘의 다섯번째 일기\",\n    date: 1684286612485\n  },\n]\n\nfunction App() {\n  const [data, dispatch] = useReducer(reducer, dummyData)\n  // data(변수명), dispatch(상태변화함수), Reducer(어떻게변화할지결정), [](기본값-빈배열)\n\n  const dataID = useRef(0);\n\n  console.log(new Date().getTime())\n\n  // CREATE\n  const onCreate = (date, content, emotion) => {\n    dispatch({\n      type: \"CREATE\", // action.type\n      data: {\n        id: dataID.current,\n        date: new Date(date).getTime(),\n        content,\n        emotion\n      },\n    })\n    dataID.current += 1\n  };\n\n  // REMOVE\n  const onRemove = (targetId) => {\n    dispatch({\n      type: \"REMOVE\",\n      targetId\n    })\n  }\n\n  // EDIT\n  const onEdit = (targetId, date, content, emotion) => {\n    dispatch({\n      type: \"EDIT\",\n      data: {\n        id: targetId,\n        date: new Date(date).getTime(),\n        content,\n        emotion\n      }\n    })\n  }\n\n  return (\n    <DiaryStateContext.Provider value={data}>\n      <DiaryDispatchContext.Provider\n        value={{\n          onCreate,\n          onEdit,\n          onRemove\n        }}\n      >\n        <BrowserRouter>\n          <div className=\"App\">\n            <Routes>\n              <Route path='/' element={<Home />} />\n              <Route path='/New' element={<New />} />\n              <Route path='/Edit/:id' element={<Edit />} />\n              <Route path='/Diary/:id' element={<Diary />} />\n            </Routes>\n          </div>\n        </BrowserRouter>\n      </DiaryDispatchContext.Provider>\n    </DiaryStateContext.Provider>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/pages/Home.js",[],[],"/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/pages/Edit.js",["80"],[],"import { useContext } from \"react\"\nimport { useParams, useNavigate } from \"react-router-dom\"\nimport { DiaryStateContext } from \"../App\"\nimport { useEffect } from \"react\"\nimport DiaryEditor from \"../components/DiaryEditor\"\nimport { useState } from \"react\"\n\nconst Edit = () => {\n  const navigate = useNavigate()\n  const { id } = useParams()\n  // 현재 id 불러오기\n  const [orginData, setOriginData] = useState()\n\n  const diaryList = useContext(DiaryStateContext)\n  console.log(id)\n  console.log(diaryList)\n\n  useEffect(() => {\n    if (diaryList.length >= 1) {\n      const targetDiary = diaryList.find(\n        (it) => parseInt(it.id) === parseInt(id)\n      )\n      console.log(targetDiary)\n      if (targetDiary) {\n        setOriginData(targetDiary)\n      } else {\n        alert(\"존재하지 않는 일기에요.\")\n        navigate(\"/\", { replace: true })\n        // id 값이 없을 경우 강제로 홈으로 이동, 뒤로가기 방지\n      }\n    }\n  }, [id, diaryList])\n  // 컴포넌트가 마운트 되었을 때, 다이어리 리스트에서\n  // 현재 Id 값에 맞는 데이터 불러오기\n\n  return <div>\n    {orginData && <DiaryEditor isEdit={true} orginData={orginData} />}\n  </div>\n}\n\nexport default Edit\n\n\n  // useSearchParams를 통해 쿼리 스트링 처리, 배열을 반환\n  // setSearchParams를 통해 쿼리 데이터 변경 가능\n  // http://localhost:3000/edit?id=1999&mode=dark\n  // const [searchParams, setSearchParams] = useSearchParams()\n  // const id = searchParams.get('id')\n  // console.log(\"id : \", id) // 1999\n  // const mode = searchParams.get('mode')\n  // console.log(\"mode : \", mode) // dark\n\n  // useNavigate는 페이지를 이동할 수 있는 함수를 반환\n  // navigate(\"경로\")\n  // 의도적으로 페이지를 변경할 때 사용","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/pages/New.js",["81"],[],"import DiaryEditor from \"../components/DiaryEditor\"\n\nconst getStringDate = (date) => {\n  return date.toISOString().slice(0, 10)\n  // ISO 형식의 문자열을 반환, YYYY-MM-DDTHH...\n}\n\nconst New = () => {\n  return <div>\n    <DiaryEditor />\n  </div>\n}\n\nexport default New","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/pages/Diary.js",["82","83"],[],"import { useState, useContext, useEffect } from \"react\"\nimport { useParams, useNavigate } from \"react-router-dom\"\nimport { DiaryStateContext } from \"../App\"\n\nimport { getStringDate } from \"../util/date\"\nimport { emotionList } from \"../util/emotion\"\n\nimport MyHeader from \"../components/MyHeader\"\nimport MyButton from \"../components/MyButton\"\n\n\nconst Diary = () => {\n\n  const { id } = useParams()\n  // 전달 받은 id를 모아 객체로 반환\n  const diaryList = useContext(DiaryStateContext)\n  const navigate = useNavigate()\n  const [data, setData] = useState()\n\n  useEffect(() => {\n    if (diaryList.length >= 1) {\n      const targetDiary = diaryList.find(\n        (it) => parseInt(it.id) === parseInt(id)\n      )\n\n      if (targetDiary) {\n        // 일기가 존재할 때\n        setData(targetDiary)\n\n      } else {\n        // 일기가 없을 때\n        alert(\"존재하지 않는 일기에요.\")\n        navigate('/', { replace: true })\n      }\n    }\n  }, [id, diaryList])\n\n\n  if (!data) {\n    return <div className=\"DiaryPage\">로딩 중입니다..</div>\n  } else {\n\n    const curEmotionDate = emotionList.find(\n      (it) => parseInt(it.emotion_id) === parseInt(data.emotion)\n    )\n    console.log(curEmotionDate)\n\n    return <div className=\"DiaryPage\">\n      <MyHeader\n        headText={`${getStringDate(new Date(data.date))} 기록`}\n        leftChild={\n          <MyButton text={\"<\"} onClick={() => navigate(-1)}\n          />\n        }\n        rightChild={\n          <MyButton text={\"수정\"} onClick={() => navigate(`/edit/${data.id}`)}\n          />\n        }\n      />\n      <article>\n        <section>\n          <h4>오늘의 감정</h4>\n          <div className=\"diary_img_wrapper\">\n            <img src={curEmotionDate.emotion_img} />\n            <div className=\"emotion_descript\">\n              {curEmotionDate.emotion_descript}\n            </div>\n          </div>\n        </section>\n        <section>\n          <h4>오늘 일기</h4>\n          <div className=\"diary_content_wrapper\">\n            <p>{data.content}</p>\n          </div>\n        </section>\n      </article>\n    </div>\n  }\n}\nexport default Diary","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/MyButton.js",[],[],"/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/MyHeader.js",[],[],"/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/DiaryList.js",["84"],[],"import { useState } from \"react\"\nimport MyButton from \"./MyButton\"\nimport { useNavigate } from \"react-router-dom\"\nimport DiaryItem from \"./DiaryItem\"\n\nconst sortOptionList = [\n  { value: \"latest\", name: \"최신순\" },\n  { value: \"oldest\", name: \"오래된순\" }\n]\nconst filterOptionList = [\n  { value: \"all\", name: \"모두\" },\n  { value: \"good\", name: \"좋은 감정\" },\n  { value: \"bad\", name: \"나쁜 감정\" }\n]\n\n\nconst ControlMenu = ({ value, onChange, optionList }) => {\n  // value 선택한 값, onChange 선택 값이 변경, 옵션(선택 리스트)\n  return (<select className=\"ControlMenu\" value={value} onChange={(e) => onChange(e.target.value)}>\n    {optionList.map((it, idx) => (\n      <option key={idx} value={it.value}>\n        {it.name}\n      </option>\n    ))}\n  </select>\n  )\n}\n\nconst DiaryList = ({ diaryList }) => {\n  const navigate = useNavigate()\n\n  // State\n  const [sortType, setSortType] = useState('lastest')\n  const [filter, setFilter] = useState('all')\n\n\n  const getProcessedDiaryList = () => {\n    const filterCallback = (item) => {\n      if (filter === 'good') {\n        return parseInt(item.emotion) <= 3\n      } else {\n        return parseInt(item.emotion) > 3\n      }\n    }\n\n    const compare = (a, b) => {\n      if (sortType === 'latest') {\n        return parseInt(b.date) - parseInt(a.date)\n      } else {\n        return parseInt(a.date) - parseInt(b.date)\n      }\n    }\n\n    const copyList = JSON.parse(JSON.stringify(diaryList))\n    // 원본 데이터의 값이 Json변환 후 배열로 생성\n\n    const failteredList = filter == 'all' ? copyList : copyList.filter((it) => filterCallback(it))\n\n    const sortedList = failteredList.sort(compare)\n    return sortedList\n  };\n\n  console.log(\"diary:\", diaryList)\n\n  return <div className=\"DiaryList\">\n    <div className=\"menu_wrapper\">\n      <div className=\"left_col\">\n        <ControlMenu value={sortType} onChange={setSortType} optionList={sortOptionList} />\n        <ControlMenu value={filter} onChange={setFilter} optionList={filterOptionList} />\n      </div>\n      <div className=\"right_col\">\n        <MyButton type={'positive'} text={'일기쓰기'} onClick={() => navigate('/new')} />\n      </div>\n    </div>\n    {getProcessedDiaryList().map((it) => (\n      <DiaryItem key={it.id} {...it} />\n    ))}\n  </div >\n}\n\nDiaryList.defaultProps = {\n  diaryList: []\n}\n\nexport default DiaryList","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/DiaryItem.js",["85"],[],"import { useNavigate } from \"react-router-dom\"\nimport MyButton from \"./MyButton\"\n\n\nconst DiaryItem = ({ id, emotion, content, date }) => {\n  const navigate = useNavigate()\n  const env = process.env\n  env.PUBLIC_URL = env.PUBLIC_URL || \"\"\n\n  const goDetail = () => {\n    navigate(`/diary/${id}`)\n  }\n\n  const goEdit = () => {\n    navigate(`/edit/${id}`)\n  }\n\n  const strDate = new Date(parseInt(date)).toLocaleDateString()\n\n  return <div className=\"DiaryItem\">\n    <div onClick={goDetail} className={[\"emotion_img_wrapper\", `emotion_img_wrapper_${emotion}`].join(\" \")}>\n      <img src={process.env.PUBLIC_URL + `assets/${emotion}.png`} />\n    </div>\n    <div onClick={goDetail} className=\"info_wrapper\">\n      <div className=\"diary_date\">{strDate}</div>\n      <div className=\"diary_content_perview\">\n        {content.slice(0, 25)}\n      </div>\n    </div>\n    <div className=\"btn_wrapper\">\n      <MyButton onClick={goEdit} text={\"수정\"} />\n    </div>\n\n  </div>\n}\n\nexport default DiaryItem","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/DiaryEditor.js",[],[],"/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/components/EmotionItem.js",["86"],[],"const EmotionItem = ({ emotion_id, emotion_img, emotion_descript, onClick, isSelected }) => {\n  return (\n    <div\n      onClick={() => onClick(emotion_id)}\n      className={[\n        \"emotion_item\", isSelected ? `emotion_item_on_${emotion_id}` : `emotion_item_off`,\n      ].join(\" \")}\n    >\n      <img src={emotion_img} />\n      <span>{emotion_descript}</span>\n    </div>\n  );\n};\n\nexport default EmotionItem;\n","/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/util/date.js",[],[],"/Users/donghae/Desktop/Portfolio/EmotionDiary_React/src/util/emotion.js",[],[],{"ruleId":"87","severity":1,"message":"88","line":29,"column":5,"nodeType":"89","messageId":"90","endLine":30,"endColumn":19},{"ruleId":"91","severity":1,"message":"92","line":32,"column":6,"nodeType":"93","endLine":32,"endColumn":21,"suggestions":"94"},{"ruleId":"95","severity":1,"message":"96","line":3,"column":7,"nodeType":"97","messageId":"98","endLine":3,"endColumn":20},{"ruleId":"91","severity":1,"message":"92","line":36,"column":6,"nodeType":"93","endLine":36,"endColumn":21,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":64,"column":13,"nodeType":"102","endLine":64,"endColumn":53},{"ruleId":"103","severity":1,"message":"104","line":57,"column":34,"nodeType":"105","messageId":"106","endLine":57,"endColumn":36},{"ruleId":"100","severity":1,"message":"101","line":22,"column":7,"nodeType":"102","endLine":22,"endColumn":69},{"ruleId":"100","severity":1,"message":"101","line":9,"column":7,"nodeType":"102","endLine":9,"endColumn":32},"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["107"],"no-unused-vars","'getStringDate' is assigned a value but never used.","Identifier","unusedVar",["108"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"109","fix":"110"},{"desc":"109","fix":"111"},"Update the dependencies array to be: [id, diaryList, navigate]",{"range":"112","text":"113"},{"range":"114","text":"113"},[890,905],"[id, diaryList, navigate]",[897,912]]